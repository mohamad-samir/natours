{"mappings":"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","sources":["<anon>","public/js/index.js","public/js/mapbox.js","public/js/login.js","public/js/alerts.js","public/js/updateSettings.js","public/js/stripe.js","public/js/env.js"],"sourcesContent":["require(\"@babel/polyfill\");\nvar $dcSHx$axios = require(\"axios\");\nvar $dcSHx$stripestripejs = require(\"@stripe/stripe-js\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable */ \n/* eslint-disable */ // Disables eslint warnings for this file\nconst $3bfab8cf376c5d44$export$4c5dd147b21b9176 = (locations)=>{\n    // Sets the Mapbox access token for making requests to Mapbox services\n    mapboxgl.accessToken = \"pk.eyJ1Ijoiam9uYXNzY2htZWR0bWFubiIsImEiOiJjam54ZmM5N3gwNjAzM3dtZDNxYTVlMnd2In0.ytpI7V7w7cyT1Kq5rT9Z1A\";\n    // Creates a new Mapbox map object\n    var map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/jonasschmedtmann/cjvi9q8jd04mi1cpgmg7ev3dy\",\n        scrollZoom: false // Disables scroll zooming on the map\n    });\n    // Creates a new LatLngBounds object to store the geographical bounds of the map\n    const bounds = new mapboxgl.LngLatBounds();\n    // Iterates over each location in the 'locations' array\n    locations.forEach((loc)=>{\n        // Create marker element\n        const el = document.createElement(\"div\");\n        el.className = \"marker\"; // Assigns a CSS class to the marker element\n        // Add marker to the map\n        new mapboxgl.Marker({\n            element: el,\n            anchor: \"bottom\" // Specifies the position of the marker relative to its center\n        }).setLngLat(loc.coordinates) // Sets the geographical coordinates of the marker\n        .addTo(map); // Adds the marker to the map\n        // Add popup to the marker\n        new mapboxgl.Popup({\n            offset: 30 // Specifies the pixel offset of the popup from the marker\n        }).setLngLat(loc.coordinates) // Sets the geographical coordinates of the popup\n        .setHTML(`<p>Day ${loc.day}: ${loc.description}</p>`) // Sets the HTML content of the popup\n        .addTo(map); // Adds the popup to the map\n        // Extend map bounds to include the current location\n        bounds.extend(loc.coordinates);\n    });\n    // Fits the map to the bounds, with padding to ensure markers are fully visible\n    map.fitBounds(bounds, {\n        padding: {\n            top: 200,\n            bottom: 150,\n            left: 100,\n            right: 100\n        }\n    });\n};\n\n\n/* eslint-disable */ \n/* eslint-disable */ // Function to hide an alert\nconst $fa53237956a9c1a9$export$516836c6a9dfc573 = ()=>{\n    // Select the first element with the class '.alert'\n    const el = document.querySelector(\".alert\");\n    // Check if such an element exists\n    if (el) // If an element is found, remove it from its parent\n    el.parentElement.removeChild(el);\n};\nconst $fa53237956a9c1a9$export$de026b00723010c1 = (type, msg)=>{\n    // Ensure any existing alert is hidden before showing a new one\n    $fa53237956a9c1a9$export$516836c6a9dfc573();\n    // Construct HTML markup for the alert using a template string\n    // type .alert--success #20bf6b or .alert--error #eb4d4b\n    const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\n    // Insert the constructed markup at the beginning of the <body> element\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", markup);\n    // Set a timeout to hide the alert after 5 seconds (5000 milliseconds)\n    window.setTimeout($fa53237956a9c1a9$export$516836c6a9dfc573, 5000);\n};\n\n\nconst $624edea9557fed72$export$596d806903d1f59e = async (email, password)=>{\n    try {\n        // Start a try block to handle potential errors in the login process.\n        const res = await (0, ($parcel$interopDefault($dcSHx$axios)))({\n            method: \"POST\",\n            url: \"/api/v1/users/login\",\n            data: {\n                email: email,\n                password: password\n            }\n        });\n        // Sending a POST request to the login endpoint with email and password as payload.\n        if (res.data.status === \"success\") {\n            // Check if the response status is 'success'.\n            (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"success\", \"Logged in successfully!\");\n            // Show a success alert to the user.\n            window.setTimeout(()=>{\n                location.assign(\"/\");\n            }, 1500);\n        // Redirect to the homepage after 1.5 seconds.\n        }\n    } catch (err) {\n        // Catch any errors that occur during the login process.\n        (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"error\", err.response.data.message);\n    // Show an error alert with the message from the server's response.\n    }\n};\nconst $624edea9557fed72$export$a0973bcfe11b05c9 = async ()=>{\n    try {\n        // Start a try block to handle potential errors in the logout process.\n        const res = await (0, ($parcel$interopDefault($dcSHx$axios)))({\n            method: \"GET\",\n            url: \"/api/v1/users/logout\"\n        });\n        // Sending a GET request to the logout endpoint.\n        if (res.data.status === \"success\") location.reload(true);\n    // If the response status is 'success', reload the page to update the UI.\n    } catch (err) {\n        // Catch any errors that occur during the logout process.\n        console.log(err.response);\n        (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"error\", \"Error logging out! Try again.\");\n    // Show an error alert indicating that the logout failed.\n    }\n}; // Explanation:\n // Client-Side Function (login):\n // - Collects user input (email and password).\n // - Sends a POST request to the server with the user input.\n // - Handles the server response, displaying success or error messages and redirecting as needed.\n // Server-Side Function (login):\n // - The server receives the email and password, validates the credentials,\n //   and responds with a status, token, and user data.\n // - If the credentials are valid, it sends back a success status and an authentication token.\n\n\n/* eslint-disable */ \n\nconst $fc21284621ba93c1$export$f558026a994b6051 = async (data, type)=>{\n    try {\n        const url = type === \"password\" ? \"/api/v1/users/updateMyPassword\" : \"/api/v1/users/updateMe\";\n        const res = await (0, ($parcel$interopDefault($dcSHx$axios)))({\n            method: \"PATCH\",\n            url: url,\n            data: data,\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        if (res.data.status === \"success\") {\n            (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"success\", `${type.toUpperCase()} updated successfully!`);\n            window.setTimeout(()=>{\n                location.assign(\"/\");\n            }, 1500);\n        }\n    } catch (err) {\n        (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"error\", err.response.data.message);\n    }\n};\n\n\n/* eslint-disable */ // Disable ESLint for this file to avoid linting errors\n\n\nconst $f787ee0e74702f1c$export$e978c53f2fe5d9bb = \"pk_test_51PTpUeBzWNB2TPAl3l6XdAFvRpgUWVaJGdQgJZ6M0Fv3zukfuVOarqkqHk7J8GhUcegKicQ3LW5kKY7uvnhlNI9o00bVCIa9uF\";\n\n\n\n// Import loadStripe function from @stripe/stripe-js\nconst $91fc991ef933994e$var$stripePromise = (0, $dcSHx$stripestripejs.loadStripe)((0, $f787ee0e74702f1c$export$e978c53f2fe5d9bb));\nconst $91fc991ef933994e$export$8d5bdbf26681c0c2 = async (tourId)=>{\n    // Define an asynchronous function bookTour that takes tourId as a parameter from data set\n    try {\n        // Try to execute the following code\n        // 1) Get checkout session from API\n        const session = await (0, ($parcel$interopDefault($dcSHx$axios)))(`/api/v1/bookings/checkout-session/${tourId}`);\n        // Make a GET request to the API endpoint to get the checkout session for the given tourId\n        // The response is stored in the session variable\n        // 2) Create checkout form + charge credit card\n        const stripe = await $91fc991ef933994e$var$stripePromise;\n        // Ensure Stripe is loaded before using it by waiting for the promise to resolve\n        await stripe.redirectToCheckout({\n            sessionId: session.data.session.id\n        });\n    // Use Stripe's redirectToCheckout method to redirect the user to the Stripe checkout page\n    // Pass the session ID obtained from the API response by axios\n    } catch (err) {\n        // If an error occurs in the try block, catch it here\n        console.log(err);\n        // Log the error to the console\n        (0, $fa53237956a9c1a9$export$de026b00723010c1)(\"error\", err);\n    // Show an alert to the user with the error message\n    }\n}; /**Purpose and Flow\nCreating a Checkout Session: The server creates a checkout session and returns\nits details (including the session ID) to the client.\nFetching the Session: The client requests the checkout session details using the tour ID.\nRedirecting to Checkout: Once the session details are fetched and Stripe is loaded,\nthe client uses redirectToCheckout to navigate the user to the Stripe-hosted payment page. */ \n\n\n// DOM ELEMENTS\nconst $4cd5f0811ef6ede8$var$mapBox = document.getElementById(\"map\");\n// Select the HTML element with the id 'map'. This is where the map will be rendered.\nconst $4cd5f0811ef6ede8$var$loginForm = document.querySelector(\".form--login\");\n// Select the HTML element with the class 'form--login'. This form is used for user login.\n// Note: The original Pug file used \".login-form\" instead of \".login-form.form--login\" which caused an error\n// Ensure that the correct class name is used in the Pug file and here to avoid selection errors.\nconst $4cd5f0811ef6ede8$var$logOutBtn = document.querySelector(\".nav__el--logout\");\n// Select the HTML element with the class 'nav__el--logout'. This button is used to log out the user.\nconst $4cd5f0811ef6ede8$var$userDataForm = document.querySelector(\".form-user-data\");\n// Select the HTML element with the class 'form-user-data'.\n// This form is used to update user data like name and email.\nconst $4cd5f0811ef6ede8$var$userPasswordForm = document.querySelector(\".form-user-password\");\n// Select the HTML element with the class 'form-user-password'.\n// This form is used to update the user's password.\nconst $4cd5f0811ef6ede8$var$bookBtn = document.getElementById(\"book-tour\");\n// DELEGATION\nif ($4cd5f0811ef6ede8$var$mapBox) {\n    // Check if the mapBox element exists on the page.\n    const locations = JSON.parse($4cd5f0811ef6ede8$var$mapBox.dataset.locations);\n    // Parse the locations data from the data-locations attribute of the mapBox element.\n    // The location data is expected to be in JSON format,\n    // so the JSON.parse() function is used to convert it into a JavaScript object\n    (0, $3bfab8cf376c5d44$export$4c5dd147b21b9176)(locations);\n// Call the displayMap function with the parsed locations to render the map.\n}\nif ($4cd5f0811ef6ede8$var$loginForm) // Check if the loginForm element exists on the page.\n$4cd5f0811ef6ede8$var$loginForm.addEventListener(\"submit\", (e)=>{\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    const email = document.getElementById(\"email\").value;\n    // Get the value of the email input field.\n    const password = document.getElementById(\"password\").value;\n    // Get the value of the password input field.\n    (0, $624edea9557fed72$export$596d806903d1f59e)(email, password);\n// Call the login function with the email and password.\n});\nif ($4cd5f0811ef6ede8$var$logOutBtn) // Check if the logOutBtn element exists on the page.\n$4cd5f0811ef6ede8$var$logOutBtn.addEventListener(\"click\", (0, $624edea9557fed72$export$a0973bcfe11b05c9));\n// Check if userDataForm exists (is not null or undefined)\nif ($4cd5f0811ef6ede8$var$userDataForm) // Add an event listener to the form for the 'submit' event\n$4cd5f0811ef6ede8$var$userDataForm.addEventListener(\"submit\", (e)=>{\n    // Prevent the default form submission behavior\n    e.preventDefault();\n    // Create a new FormData object to hold the form data\n    const form = new FormData();\n    // Append the 'name' field value to the FormData object\n    form.append(\"name\", document.getElementById(\"name\").value);\n    // Append the 'email' field value to the FormData object\n    form.append(\"email\", document.getElementById(\"email\").value);\n    // Append the 'photo' file input (as a file list) to the FormData object\n    // By using [0], you are accessing the first selected file in the list.\n    form.append(\"photo\", document.getElementById(\"photo\").files[0]);\n    // Uncomment these lines if you want to use plain object instead of FormData\n    // const name = document.getElementById('name').value;\n    // const email = document.getElementById('email').value;\n    // updateSettings({ name, email }, 'data');\n    // Call the updateSettings function, passing the FormData object and the 'data' string\n    (0, $fc21284621ba93c1$export$f558026a994b6051)(form, \"data\");\n});\nif ($4cd5f0811ef6ede8$var$userPasswordForm) // Check if the userPasswordForm element exists on the page.\n$4cd5f0811ef6ede8$var$userPasswordForm.addEventListener(\"submit\", async (e)=>{\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\n    // Change the button text to 'Updating...' to indicate that the update is in progress.\n    const passwordCurrent = document.getElementById(\"password-current\").value;\n    // Get the value of the current password input field.\n    const password = document.getElementById(\"password\").value;\n    // Get the value of the new password input field.\n    const passwordConfirm = document.getElementById(\"password-confirm\").value;\n    // Get the value of the confirm password input field.\n    await (0, $fc21284621ba93c1$export$f558026a994b6051)({\n        passwordCurrent: passwordCurrent,\n        password: password,\n        passwordConfirm: passwordConfirm\n    }, \"password\");\n    // Call the updateSettings function with the current password, new password,\n    // and confirm password, specifying the type of update as 'password'.\n    document.querySelector(\".btn--save-password\").textContent = \"Save password\";\n    // Change the button text back to 'Save password' after the update is complete.\n    document.getElementById(\"password-current\").value = \"\";\n    // Clear the current password input field.\n    document.getElementById(\"password\").value = \"\";\n    // Clear the new password input field.\n    document.getElementById(\"password-confirm\").value = \"\";\n// Clear the confirm password input field.\n});\nif ($4cd5f0811ef6ede8$var$bookBtn) $4cd5f0811ef6ede8$var$bookBtn.addEventListener(\"click\", (e)=>{\n    e.target.textContent = \"Processing...\";\n    //data-tour-id from e.target.dataset will be converted to tourId in js\n    const { tourId: tourId } = e.target.dataset;\n    (0, $91fc991ef933994e$export$8d5bdbf26681c0c2)(tourId);\n}); // const alertMessage = document.querySelector('body').dataset.alert;\n // if (alertMessage) showAlert('success', alertMessage, 20);\n\n\n//# sourceMappingURL=index.js.map\n","/* eslint-disable */\n\nimport '@babel/polyfill';\n// Import polyfills from Babel to ensure compatibility with older browsers that\n// do not support modern JavaScript features.\n\nimport { displayMap } from './mapbox';\n// Import the displayMap function from the mapbox module. This function is\n// likely used to render a map on the webpage.\n\nimport { login, logout } from './login';\n// Import login and logout functions from the login module.\n// These functions handle user authentication.\n\nimport { updateSettings } from './updateSettings';\n// Import updateSettings function from the updateSettings module.\n// This function updates user settings like name, email, or password.\n\nimport { bookTour } from './stripe';\n\n// DOM ELEMENTS\nconst mapBox = document.getElementById('map');\n// Select the HTML element with the id 'map'. This is where the map will be rendered.\n\nconst loginForm = document.querySelector('.form--login');\n// Select the HTML element with the class 'form--login'. This form is used for user login.\n// Note: The original Pug file used \".login-form\" instead of \".login-form.form--login\" which caused an error\n// Ensure that the correct class name is used in the Pug file and here to avoid selection errors.\n\nconst logOutBtn = document.querySelector('.nav__el--logout');\n// Select the HTML element with the class 'nav__el--logout'. This button is used to log out the user.\n\nconst userDataForm = document.querySelector('.form-user-data');\n// Select the HTML element with the class 'form-user-data'.\n// This form is used to update user data like name and email.\n\nconst userPasswordForm = document.querySelector('.form-user-password');\n// Select the HTML element with the class 'form-user-password'.\n// This form is used to update the user's password.\n\nconst bookBtn = document.getElementById('book-tour');\n\n// DELEGATION\n\nif (mapBox) {\n  // Check if the mapBox element exists on the page.\n  const locations = JSON.parse(mapBox.dataset.locations);\n  // Parse the locations data from the data-locations attribute of the mapBox element.\n  // The location data is expected to be in JSON format,\n  // so the JSON.parse() function is used to convert it into a JavaScript object\n  displayMap(locations);\n  // Call the displayMap function with the parsed locations to render the map.\n}\n\nif (loginForm) {\n  // Check if the loginForm element exists on the page.\n  loginForm.addEventListener('submit', (e) => {\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    const email = document.getElementById('email').value;\n    // Get the value of the email input field.\n    const password = document.getElementById('password').value;\n    // Get the value of the password input field.\n    login(email, password);\n    // Call the login function with the email and password.\n  });\n}\n\nif (logOutBtn) {\n  // Check if the logOutBtn element exists on the page.\n  logOutBtn.addEventListener('click', logout);\n  // Add an event listener to handle the click event and call the logout function.\n}\n\n// Check if userDataForm exists (is not null or undefined)\nif (userDataForm) {\n  // Add an event listener to the form for the 'submit' event\n  userDataForm.addEventListener('submit', (e) => {\n    // Prevent the default form submission behavior\n    e.preventDefault();\n\n    // Create a new FormData object to hold the form data\n    const form = new FormData();\n\n    // Append the 'name' field value to the FormData object\n    form.append('name', document.getElementById('name').value);\n\n    // Append the 'email' field value to the FormData object\n    form.append('email', document.getElementById('email').value);\n\n    // Append the 'photo' file input (as a file list) to the FormData object\n    // By using [0], you are accessing the first selected file in the list.\n    form.append('photo', document.getElementById('photo').files[0]);\n\n    // Uncomment these lines if you want to use plain object instead of FormData\n    // const name = document.getElementById('name').value;\n    // const email = document.getElementById('email').value;\n    // updateSettings({ name, email }, 'data');\n\n    // Call the updateSettings function, passing the FormData object and the 'data' string\n    updateSettings(form, 'data');\n  });\n}\n\nif (userPasswordForm) {\n  // Check if the userPasswordForm element exists on the page.\n  userPasswordForm.addEventListener('submit', async (e) => {\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    document.querySelector('.btn--save-password').textContent = 'Updating...';\n    // Change the button text to 'Updating...' to indicate that the update is in progress.\n\n    const passwordCurrent = document.getElementById('password-current').value;\n    // Get the value of the current password input field.\n    const password = document.getElementById('password').value;\n    // Get the value of the new password input field.\n    const passwordConfirm = document.getElementById('password-confirm').value;\n    // Get the value of the confirm password input field.\n\n    await updateSettings(\n      { passwordCurrent, password, passwordConfirm },\n      'password',\n    );\n    // Call the updateSettings function with the current password, new password,\n    // and confirm password, specifying the type of update as 'password'.\n\n    document.querySelector('.btn--save-password').textContent = 'Save password';\n    // Change the button text back to 'Save password' after the update is complete.\n\n    document.getElementById('password-current').value = '';\n    // Clear the current password input field.\n    document.getElementById('password').value = '';\n    // Clear the new password input field.\n    document.getElementById('password-confirm').value = '';\n    // Clear the confirm password input field.\n  });\n}\n\nif (bookBtn)\n  bookBtn.addEventListener('click', (e) => {\n    e.target.textContent = 'Processing...';\n    //data-tour-id from e.target.dataset will be converted to tourId in js\n    const { tourId } = e.target.dataset;\n    bookTour(tourId);\n  });\n\n// const alertMessage = document.querySelector('body').dataset.alert;\n// if (alertMessage) showAlert('success', alertMessage, 20);\n","/* eslint-disable */\n// Disables eslint warnings for this file\n\nexport const displayMap = locations => {\n  // Sets the Mapbox access token for making requests to Mapbox services\n  mapboxgl.accessToken =\n    'pk.eyJ1Ijoiam9uYXNzY2htZWR0bWFubiIsImEiOiJjam54ZmM5N3gwNjAzM3dtZDNxYTVlMnd2In0.ytpI7V7w7cyT1Kq5rT9Z1A';\n\n  // Creates a new Mapbox map object\n  var map = new mapboxgl.Map({\n    container: 'map', // Specifies the HTML element that will contain the map\n    style: 'mapbox://styles/jonasschmedtmann/cjvi9q8jd04mi1cpgmg7ev3dy', // Specifies the map style\n    scrollZoom: false // Disables scroll zooming on the map\n    // center: [-118.113491, 34.111745], // Optionally sets the initial center coordinates of the map\n    // zoom: 10, // Optionally sets the initial zoom level of the map\n    // interactive: false // Optionally disables interactivity with the map\n  });\n\n  // Creates a new LatLngBounds object to store the geographical bounds of the map\n  const bounds = new mapboxgl.LngLatBounds();\n\n  // Iterates over each location in the 'locations' array\n  locations.forEach(loc => {\n    // Create marker element\n    const el = document.createElement('div');\n    el.className = 'marker'; // Assigns a CSS class to the marker element\n\n    // Add marker to the map\n    new mapboxgl.Marker({\n      element: el, // Specifies the DOM element to use as the marker\n      anchor: 'bottom' // Specifies the position of the marker relative to its center\n    })\n      .setLngLat(loc.coordinates) // Sets the geographical coordinates of the marker\n      .addTo(map); // Adds the marker to the map\n\n    // Add popup to the marker\n    new mapboxgl.Popup({\n      offset: 30 // Specifies the pixel offset of the popup from the marker\n    })\n      .setLngLat(loc.coordinates) // Sets the geographical coordinates of the popup\n      .setHTML(`<p>Day ${loc.day}: ${loc.description}</p>`) // Sets the HTML content of the popup\n      .addTo(map); // Adds the popup to the map\n\n    // Extend map bounds to include the current location\n    bounds.extend(loc.coordinates);\n  });\n\n  // Fits the map to the bounds, with padding to ensure markers are fully visible\n  map.fitBounds(bounds, {\n    padding: {\n      top: 200,\n      bottom: 150,\n      left: 100,\n      right: 100\n    }\n  });\n};\n","/* eslint-disable */\nimport axios from 'axios';\nimport { showAlert } from './alerts';\n// Importing axios for making HTTP requests and showAlert for displaying messages to the user.\n\nexport const login = async (email, password) => {\n  try {\n    // Start a try block to handle potential errors in the login process.\n    const res = await axios({\n      method: 'POST',\n      url: '/api/v1/users/login',\n      data: {\n        email,\n        password\n      }\n    });\n    // Sending a POST request to the login endpoint with email and password as payload.\n\n    if (res.data.status === 'success') {\n      // Check if the response status is 'success'.\n      showAlert('success', 'Logged in successfully!');\n      // Show a success alert to the user.\n\n      window.setTimeout(() => {\n        location.assign('/');\n      }, 1500);\n      // Redirect to the homepage after 1.5 seconds.\n    }\n  } catch (err) {\n    // Catch any errors that occur during the login process.\n    showAlert('error', err.response.data.message);\n    // Show an error alert with the message from the server's response.\n  }\n};\n\nexport const logout = async () => {\n  try {\n    // Start a try block to handle potential errors in the logout process.\n    const res = await axios({\n      method: 'GET',\n      url: '/api/v1/users/logout'\n    });\n    // Sending a GET request to the logout endpoint.\n\n    if (res.data.status === 'success') location.reload(true);\n    // If the response status is 'success', reload the page to update the UI.\n  } catch (err) {\n    // Catch any errors that occur during the logout process.\n    console.log(err.response);\n    showAlert('error', 'Error logging out! Try again.');\n    // Show an error alert indicating that the logout failed.\n  }\n};\n\n// Explanation:\n// Client-Side Function (login):\n// - Collects user input (email and password).\n// - Sends a POST request to the server with the user input.\n// - Handles the server response, displaying success or error messages and redirecting as needed.\n\n// Server-Side Function (login):\n// - The server receives the email and password, validates the credentials,\n//   and responds with a status, token, and user data.\n// - If the credentials are valid, it sends back a success status and an authentication token.\n","/* eslint-disable */\n\n// Function to hide an alert\nexport const hideAlert = () => {\n  // Select the first element with the class '.alert'\n  const el = document.querySelector('.alert');\n\n  // Check if such an element exists\n  if (el) {\n    // If an element is found, remove it from its parent\n    el.parentElement.removeChild(el);\n  }\n};\n\n// Function to show an alert\nexport const showAlert = (type, msg) => {\n  // Ensure any existing alert is hidden before showing a new one\n  hideAlert();\n\n  // Construct HTML markup for the alert using a template string\n  // type .alert--success #20bf6b or .alert--error #eb4d4b\n  const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\n\n  // Insert the constructed markup at the beginning of the <body> element\n  document.querySelector('body').insertAdjacentHTML('afterbegin', markup);\n\n  // Set a timeout to hide the alert after 5 seconds (5000 milliseconds)\n  window.setTimeout(hideAlert, 5000);\n};\n","/* eslint-disable */\nimport axios from 'axios';\nimport { showAlert } from './alerts';\n\nexport const updateSettings = async (data, type) => {\n  try {\n    const url =\n      type === 'password'\n        ? '/api/v1/users/updateMyPassword'\n        : '/api/v1/users/updateMe';\n    const res = await axios({\n      method: 'PATCH',\n      url,\n      data,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    if (res.data.status === 'success') {\n      showAlert('success', `${type.toUpperCase()} updated successfully!`);\n      window.setTimeout(() => {\n        location.assign('/');\n      }, 1500);\n    }\n  } catch (err) {\n    showAlert('error', err.response.data.message);\n  }\n};\n","/* eslint-disable */\n// Disable ESLint for this file to avoid linting errors\n\nimport axios from 'axios';\n// Import axios for making HTTP requests\n\nimport { showAlert } from './alerts';\n// Import a function to show alerts to the user\n\nimport { STRIPE_PUBLIC_KEY } from './env';\n// Import the Stripe public key from environment variables\n\nimport { loadStripe } from '@stripe/stripe-js';\n// Import loadStripe function from @stripe/stripe-js\n\nconst stripePromise = loadStripe(STRIPE_PUBLIC_KEY);\n// Load Stripe with your public key and assign it to stripePromise\n\nexport const bookTour = async tourId => {\n  // Define an asynchronous function bookTour that takes tourId as a parameter from data set\n  try {\n    // Try to execute the following code\n\n    // 1) Get checkout session from API\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\n    // Make a GET request to the API endpoint to get the checkout session for the given tourId\n    // The response is stored in the session variable\n\n    // 2) Create checkout form + charge credit card\n    const stripe = await stripePromise;\n    // Ensure Stripe is loaded before using it by waiting for the promise to resolve\n\n    await stripe.redirectToCheckout({\n      sessionId: session.data.session.id\n    });\n    // Use Stripe's redirectToCheckout method to redirect the user to the Stripe checkout page\n    // Pass the session ID obtained from the API response by axios\n  } catch (err) {\n    // If an error occurs in the try block, catch it here\n    console.log(err);\n    // Log the error to the console\n\n    showAlert('error', err);\n    // Show an alert to the user with the error message\n  }\n};\n\n/**Purpose and Flow\nCreating a Checkout Session: The server creates a checkout session and returns\nits details (including the session ID) to the client.\nFetching the Session: The client requests the checkout session details using the tour ID.\nRedirecting to Checkout: Once the session details are fetched and Stripe is loaded,\nthe client uses redirectToCheckout to navigate the user to the Stripe-hosted payment page. */\n","export const STRIPE_PUBLIC_KEY =\n  'pk_test_51PTpUeBzWNB2TPAl3l6XdAFvRpgUWVaJGdQgJZ6M0Fv3zukfuVOarqkqHk7J8GhUcegKicQ3LW5kKY7uvnhlNI9o00bVCIa9uF';\n"],"names":["require","$dcSHx$axios","$dcSHx$stripestripejs","$parcel$interopDefault","a","__esModule","default","$fa53237956a9c1a9$export$516836c6a9dfc573","el","document","querySelector","parentElement","removeChild","$fa53237956a9c1a9$export$de026b00723010c1","type","msg","markup","insertAdjacentHTML","window","setTimeout","$624edea9557fed72$export$596d806903d1f59e","email","password","res","method","url","data","status","location","assign","err","response","message","$624edea9557fed72$export$a0973bcfe11b05c9","reload","console","log","$fc21284621ba93c1$export$f558026a994b6051","headers","toUpperCase","$91fc991ef933994e$var$stripePromise","loadStripe","$91fc991ef933994e$export$8d5bdbf26681c0c2","tourId","session","stripe","redirectToCheckout","sessionId","id","$4cd5f0811ef6ede8$var$mapBox","getElementById","$4cd5f0811ef6ede8$var$loginForm","$4cd5f0811ef6ede8$var$logOutBtn","$4cd5f0811ef6ede8$var$userDataForm","$4cd5f0811ef6ede8$var$userPasswordForm","$4cd5f0811ef6ede8$var$bookBtn","locations","mapboxgl","accessToken","map","Map","container","style","scrollZoom","bounds","LngLatBounds","forEach","loc","createElement","className","Marker","element","anchor","setLngLat","coordinates","addTo","Popup","offset","setHTML","day","description","extend","fitBounds","padding","top","bottom","left","right","JSON","parse","dataset","addEventListener","e","preventDefault","value","form","FormData","append","files","textContent","passwordCurrent","passwordConfirm","target"],"version":3,"file":"index.js.map","sourceRoot":"../../"}