{"mappings":"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","sources":["public/js/index.js","public/js/mapbox.js","public/js/login.js","public/js/alerts.js","public/js/updateSettings.js","public/js/stripe.js","public/js/env.js"],"sourcesContent":["/* eslint-disable */\n\nimport '@babel/polyfill';\n// Import polyfills from Babel to ensure compatibility with older browsers that\n// do not support modern JavaScript features.\n\nimport { displayMap } from './mapbox';\n// Import the displayMap function from the mapbox module. This function is\n// likely used to render a map on the webpage.\n\nimport { login, logout } from './login';\n// Import login and logout functions from the login module.\n// These functions handle user authentication.\n\nimport { updateSettings } from './updateSettings';\n// Import updateSettings function from the updateSettings module.\n// This function updates user settings like name, email, or password.\n\nimport { bookTour } from './stripe';\n\n// DOM ELEMENTS\nconst mapBox = document.getElementById('map');\n// Select the HTML element with the id 'map'. This is where the map will be rendered.\n\nconst loginForm = document.querySelector('.form--login');\n// Select the HTML element with the class 'form--login'. This form is used for user login.\n// Note: The original Pug file used \".login-form\" instead of \".login-form.form--login\" which caused an error\n// Ensure that the correct class name is used in the Pug file and here to avoid selection errors.\n\nconst logOutBtn = document.querySelector('.nav__el--logout');\n// Select the HTML element with the class 'nav__el--logout'. This button is used to log out the user.\n\nconst userDataForm = document.querySelector('.form-user-data');\n// Select the HTML element with the class 'form-user-data'.\n// This form is used to update user data like name and email.\n\nconst userPasswordForm = document.querySelector('.form-user-password');\n// Select the HTML element with the class 'form-user-password'.\n// This form is used to update the user's password.\n\nconst bookBtn = document.getElementById('book-tour');\n\n// DELEGATION\n\nif (mapBox) {\n  // Check if the mapBox element exists on the page.\n  const locations = JSON.parse(mapBox.dataset.locations);\n  // Parse the locations data from the data-locations attribute of the mapBox element.\n  // The location data is expected to be in JSON format,\n  // so the JSON.parse() function is used to convert it into a JavaScript object\n  displayMap(locations);\n  // Call the displayMap function with the parsed locations to render the map.\n}\n\nif (loginForm) {\n  // Check if the loginForm element exists on the page.\n  loginForm.addEventListener('submit', (e) => {\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    const email = document.getElementById('email').value;\n    // Get the value of the email input field.\n    const password = document.getElementById('password').value;\n    // Get the value of the password input field.\n    login(email, password);\n    // Call the login function with the email and password.\n  });\n}\n\nif (logOutBtn) {\n  // Check if the logOutBtn element exists on the page.\n  logOutBtn.addEventListener('click', logout);\n  // Add an event listener to handle the click event and call the logout function.\n}\n\n// Check if userDataForm exists (is not null or undefined)\nif (userDataForm) {\n  // Add an event listener to the form for the 'submit' event\n  userDataForm.addEventListener('submit', (e) => {\n    // Prevent the default form submission behavior\n    e.preventDefault();\n\n    // Create a new FormData object to hold the form data\n    const form = new FormData();\n\n    // Append the 'name' field value to the FormData object\n    form.append('name', document.getElementById('name').value);\n\n    // Append the 'email' field value to the FormData object\n    form.append('email', document.getElementById('email').value);\n\n    // Append the 'photo' file input (as a file list) to the FormData object\n    // By using [0], you are accessing the first selected file in the list.\n    form.append('photo', document.getElementById('photo').files[0]);\n\n    // Uncomment these lines if you want to use plain object instead of FormData\n    // const name = document.getElementById('name').value;\n    // const email = document.getElementById('email').value;\n    // updateSettings({ name, email }, 'data');\n\n    // Call the updateSettings function, passing the FormData object and the 'data' string\n    updateSettings(form, 'data');\n  });\n}\n\nif (userPasswordForm) {\n  // Check if the userPasswordForm element exists on the page.\n  userPasswordForm.addEventListener('submit', async (e) => {\n    // Add an event listener to handle the form submission.\n    e.preventDefault();\n    // Prevent the default form submission behavior to handle it via JavaScript.\n    document.querySelector('.btn--save-password').textContent = 'Updating...';\n    // Change the button text to 'Updating...' to indicate that the update is in progress.\n\n    const passwordCurrent = document.getElementById('password-current').value;\n    // Get the value of the current password input field.\n    const password = document.getElementById('password').value;\n    // Get the value of the new password input field.\n    const passwordConfirm = document.getElementById('password-confirm').value;\n    // Get the value of the confirm password input field.\n\n    await updateSettings(\n      { passwordCurrent, password, passwordConfirm },\n      'password',\n    );\n    // Call the updateSettings function with the current password, new password,\n    // and confirm password, specifying the type of update as 'password'.\n\n    document.querySelector('.btn--save-password').textContent = 'Save password';\n    // Change the button text back to 'Save password' after the update is complete.\n\n    document.getElementById('password-current').value = '';\n    // Clear the current password input field.\n    document.getElementById('password').value = '';\n    // Clear the new password input field.\n    document.getElementById('password-confirm').value = '';\n    // Clear the confirm password input field.\n  });\n}\n\nif (bookBtn)\n  bookBtn.addEventListener('click', (e) => {\n    e.target.textContent = 'Processing...';\n    //data-tour-id from e.target.dataset will be converted to tourId in js\n    const { tourId } = e.target.dataset;\n    bookTour(tourId);\n  });\n\n// const alertMessage = document.querySelector('body').dataset.alert;\n// if (alertMessage) showAlert('success', alertMessage, 20);\n","/* eslint-disable */\n// Disables eslint warnings for this file\n\nexport const displayMap = locations => {\n  // Sets the Mapbox access token for making requests to Mapbox services\n  mapboxgl.accessToken =\n    'pk.eyJ1Ijoiam9uYXNzY2htZWR0bWFubiIsImEiOiJjam54ZmM5N3gwNjAzM3dtZDNxYTVlMnd2In0.ytpI7V7w7cyT1Kq5rT9Z1A';\n\n  // Creates a new Mapbox map object\n  var map = new mapboxgl.Map({\n    container: 'map', // Specifies the HTML element that will contain the map\n    style: 'mapbox://styles/jonasschmedtmann/cjvi9q8jd04mi1cpgmg7ev3dy', // Specifies the map style\n    scrollZoom: false // Disables scroll zooming on the map\n    // center: [-118.113491, 34.111745], // Optionally sets the initial center coordinates of the map\n    // zoom: 10, // Optionally sets the initial zoom level of the map\n    // interactive: false // Optionally disables interactivity with the map\n  });\n\n  // Creates a new LatLngBounds object to store the geographical bounds of the map\n  const bounds = new mapboxgl.LngLatBounds();\n\n  // Iterates over each location in the 'locations' array\n  locations.forEach(loc => {\n    // Create marker element\n    const el = document.createElement('div');\n    el.className = 'marker'; // Assigns a CSS class to the marker element\n\n    // Add marker to the map\n    new mapboxgl.Marker({\n      element: el, // Specifies the DOM element to use as the marker\n      anchor: 'bottom' // Specifies the position of the marker relative to its center\n    })\n      .setLngLat(loc.coordinates) // Sets the geographical coordinates of the marker\n      .addTo(map); // Adds the marker to the map\n\n    // Add popup to the marker\n    new mapboxgl.Popup({\n      offset: 30 // Specifies the pixel offset of the popup from the marker\n    })\n      .setLngLat(loc.coordinates) // Sets the geographical coordinates of the popup\n      .setHTML(`<p>Day ${loc.day}: ${loc.description}</p>`) // Sets the HTML content of the popup\n      .addTo(map); // Adds the popup to the map\n\n    // Extend map bounds to include the current location\n    bounds.extend(loc.coordinates);\n  });\n\n  // Fits the map to the bounds, with padding to ensure markers are fully visible\n  map.fitBounds(bounds, {\n    padding: {\n      top: 200,\n      bottom: 150,\n      left: 100,\n      right: 100\n    }\n  });\n};\n","/* eslint-disable */\nimport axios from 'axios';\nimport { showAlert } from './alerts';\n// Importing axios for making HTTP requests and showAlert for displaying messages to the user.\n\nexport const login = async (email, password) => {\n  try {\n    // Start a try block to handle potential errors in the login process.\n    const res = await axios({\n      method: 'POST',\n      url: '/api/v1/users/login',\n      data: {\n        email,\n        password\n      }\n    });\n    // Sending a POST request to the login endpoint with email and password as payload.\n\n    if (res.data.status === 'success') {\n      // Check if the response status is 'success'.\n      showAlert('success', 'Logged in successfully!');\n      // Show a success alert to the user.\n\n      window.setTimeout(() => {\n        location.assign('/');\n      }, 1500);\n      // Redirect to the homepage after 1.5 seconds.\n    }\n  } catch (err) {\n    // Catch any errors that occur during the login process.\n    showAlert('error', err.response.data.message);\n    // Show an error alert with the message from the server's response.\n  }\n};\n\nexport const logout = async () => {\n  try {\n    // Start a try block to handle potential errors in the logout process.\n    const res = await axios({\n      method: 'GET',\n      url: '/api/v1/users/logout'\n    });\n    // Sending a GET request to the logout endpoint.\n\n    if (res.data.status === 'success') location.reload(true);\n    // If the response status is 'success', reload the page to update the UI.\n  } catch (err) {\n    // Catch any errors that occur during the logout process.\n    console.log(err.response);\n    showAlert('error', 'Error logging out! Try again.');\n    // Show an error alert indicating that the logout failed.\n  }\n};\n\n// Explanation:\n// Client-Side Function (login):\n// - Collects user input (email and password).\n// - Sends a POST request to the server with the user input.\n// - Handles the server response, displaying success or error messages and redirecting as needed.\n\n// Server-Side Function (login):\n// - The server receives the email and password, validates the credentials,\n//   and responds with a status, token, and user data.\n// - If the credentials are valid, it sends back a success status and an authentication token.\n","/* eslint-disable */\n\n// Function to hide an alert\nexport const hideAlert = () => {\n  // Select the first element with the class '.alert'\n  const el = document.querySelector('.alert');\n\n  // Check if such an element exists\n  if (el) {\n    // If an element is found, remove it from its parent\n    el.parentElement.removeChild(el);\n  }\n};\n\n// Function to show an alert\nexport const showAlert = (type, msg) => {\n  // Ensure any existing alert is hidden before showing a new one\n  hideAlert();\n\n  // Construct HTML markup for the alert using a template string\n  // type .alert--success #20bf6b or .alert--error #eb4d4b\n  const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\n\n  // Insert the constructed markup at the beginning of the <body> element\n  document.querySelector('body').insertAdjacentHTML('afterbegin', markup);\n\n  // Set a timeout to hide the alert after 5 seconds (5000 milliseconds)\n  window.setTimeout(hideAlert, 5000);\n};\n","/* eslint-disable */\nimport axios from 'axios';\nimport { showAlert } from './alerts';\n\nexport const updateSettings = async (data, type) => {\n  try {\n    const url =\n      type === 'password'\n        ? '/api/v1/users/updateMyPassword'\n        : '/api/v1/users/updateMe';\n    const res = await axios({\n      method: 'PATCH',\n      url,\n      data,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    if (res.data.status === 'success') {\n      showAlert('success', `${type.toUpperCase()} updated successfully!`);\n      window.setTimeout(() => {\n        location.assign('/');\n      }, 1500);\n    }\n  } catch (err) {\n    showAlert('error', err.response.data.message);\n  }\n};\n","/* eslint-disable */\n// Disable ESLint for this file to avoid linting errors\n\nimport axios from 'axios';\n// Import axios for making HTTP requests\n\nimport { showAlert } from './alerts';\n// Import a function to show alerts to the user\n\nimport { STRIPE_PUBLIC_KEY } from './env';\n// Import the Stripe public key from environment variables\n\nimport { loadStripe } from '@stripe/stripe-js';\n// Import loadStripe function from @stripe/stripe-js\n\nconst stripePromise = loadStripe(STRIPE_PUBLIC_KEY);\n// Load Stripe with your public key and assign it to stripePromise\n\nexport const bookTour = async tourId => {\n  // Define an asynchronous function bookTour that takes tourId as a parameter from data set\n  try {\n    // Try to execute the following code\n\n    // 1) Get checkout session from API\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\n    // Make a GET request to the API endpoint to get the checkout session for the given tourId\n    // The response is stored in the session variable\n\n    // 2) Create checkout form + charge credit card\n    const stripe = await stripePromise;\n    // Ensure Stripe is loaded before using it by waiting for the promise to resolve\n\n    await stripe.redirectToCheckout({\n      sessionId: session.data.session.id\n    });\n    // Use Stripe's redirectToCheckout method to redirect the user to the Stripe checkout page\n    // Pass the session ID obtained from the API response by axios\n  } catch (err) {\n    // If an error occurs in the try block, catch it here\n    console.log(err);\n    // Log the error to the console\n\n    showAlert('error', err);\n    // Show an alert to the user with the error message\n  }\n};\n\n/**Purpose and Flow\nCreating a Checkout Session: The server creates a checkout session and returns\nits details (including the session ID) to the client.\nFetching the Session: The client requests the checkout session details using the tour ID.\nRedirecting to Checkout: Once the session details are fetched and Stripe is loaded,\nthe client uses redirectToCheckout to navigate the user to the Stripe-hosted payment page. */\n","export const STRIPE_PUBLIC_KEY =\n  'pk_test_51PTpUeBzWNB2TPAl3l6XdAFvRpgUWVaJGdQgJZ6M0Fv3zukfuVOarqkqHk7J8GhUcegKicQ3LW5kKY7uvnhlNI9o00bVCIa9uF';\n"],"names":[],"version":3,"file":"app.js.map","sourceRoot":"/"}